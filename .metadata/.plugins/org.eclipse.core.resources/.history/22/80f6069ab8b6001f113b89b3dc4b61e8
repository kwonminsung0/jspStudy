package co.kh.dev.common;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Properties;

public final class ConnectionPool {
	// 1. Oracle Driver를 정적처리해서 로드한다.
	static {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	// 2. 멤버변수
	private ArrayList<Connection> free;
	private ArrayList<Connection> used; // 사용중인 커넥션을 저장하는 변수
	private int initialCons = 10; // 최초로 초기 커넥션수
	private int maxCons = 20; // 최대 커넥션수
	private int numCons = 0; // 총 Connection 수
	private String id = null;
	private String pw = null;
	private String url = null;
	// private String url = "jdbc:oracle:thin:@localhost:1521:xe";
	// private String user = "hr";
	// private String password = "hr";

	// 3. 싱글톤(자기참조멤버변수, 생성자함수, 자기참조멤버변수 겟터)
	private static ConnectionPool cp;

	public static ConnectionPool getInstance() {
		// 딱 한번만 실행. 절대 두번 실행하지 않는다.
		try {
			if (cp == null) {
				synchronized (ConnectionPool.class) {
					cp = new ConnectionPool();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return cp;
	}

	private ConnectionPool() {
		// 1. ArrayList 10개까지만 사용
		free = new ArrayList<Connection>(initialCons);
		used = new ArrayList<Connection>(initialCons);

		// 2. db.properties 파일 에서 id, pw 가져오기
		String filePath = "C:\\dev\\eclipseWorkspace\\jspStudy\\src\\main\\java\\co\\kh\\dev\\common\\db.properties";
		Properties pt = new Properties();
		try {
			pt.load(new FileReader(filePath));
		} catch (Exception e) {
			e.printStackTrace();
		}
		String id = pt.getProperty("id");
		String pw = pt.getProperty("pw");
		String url = pt.getProperty("url");

		// 데이터베이스에 연결된 Connection 10개를 만들어서 free Connection 저장한다.
		while (numCons < initialCons) {
			addConnection();
		}

	}

	private void addConnection() {
		free.add(getNewConnection());

	}

	private Connection getNewConnection() {
		Connection con = null;

		con = DriverManager.getConnection(url, id, pw);
		return null;
	}

}
